plugins {
	id 'java'
	id 'maven-publish'
	id 'java-gradle-plugin'
	id 'idea'
	id 'groovy'
	id "org.jetbrains.kotlin.jvm" version "1.6.21" // Must match the version included with gradle.
	id "com.diffplug.spotless" version "6.8.0"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = "17"
	}
}

group = "dev.architectury"
archivesBaseName = project.name

version = '1.0-SNAPSHOT'

logger.lifecycle(":building plugin v${version}")

repositories {
	mavenCentral()
	maven { url "https://maven.fabricmc.net/" }
	maven { url "https://maven.architectury.dev/" }
	maven {
		url "https://maven.minecraftforge.net/"
		content {
			excludeGroupByRegex "org\\.eclipse\\.?.*"
		}
	}
}

configurations {
	bootstrap {
		transitive false
	}
	compileClasspath.extendsFrom bootstrap
	runtimeClasspath.extendsFrom bootstrap
	testRuntimeClasspath.extendsFrom bootstrap
}

dependencies {
	implementation gradleApi()

	bootstrap project(":bootstrap")

	// libraries
	implementation('commons-io:commons-io:2.11.0')
	implementation('com.google.code.gson:gson:2.10')
	implementation('com.fasterxml.jackson.core:jackson-databind:2.14.0')
	implementation('com.google.guava:guava:31.1-jre')
	implementation('org.ow2.asm:asm:9.4')
	implementation('org.ow2.asm:asm-analysis:9.4')
	implementation('org.ow2.asm:asm-commons:9.4')
	implementation('org.ow2.asm:asm-tree:9.4')
	implementation('org.ow2.asm:asm-util:9.4')
	implementation('me.tongfei:progressbar:0.9.5')

	// game handling utils
	implementation('net.fabricmc:stitch:0.6.2') {
		exclude module: 'mercury'
		exclude module: 'enigma'
	}

	// tinyfile management
	implementation('dev.architectury:tiny-remapper:1.8.20')
	implementation 'net.fabricmc:access-widener:2.1.0'
	implementation 'net.fabricmc:mapping-io:0.2.1'

	implementation('net.fabricmc:lorenz-tiny:4.0.2') {
		transitive = false
	}
	implementation("dev.architectury:refmap-remapper:1.0.5")

	// decompilers
	implementation('net.fabricmc:fabric-fernflower:1.5.0')
	implementation('net.fabricmc:cfr:0.1.1')

	// source code remapping
	implementation('dev.architectury:mercury:0.1.1.11')

	// Kotlin
	implementation('org.jetbrains.kotlinx:kotlinx-metadata-jvm:0.5.0') {
		transitive = false
	}

	// Kapt integration
	compileOnly('org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21') // Must match the version included with gradle.

	// Forge patches
	implementation('net.minecraftforge:installertools:1.2.0')
	implementation('org.cadixdev:lorenz:0.5.8')
	implementation('org.cadixdev:lorenz-asm:0.5.8')
	implementation('de.oceanlabs.mcp:mcinjector:3.8.0')
	implementation('com.opencsv:opencsv:5.7.1')
	implementation('net.minecraftforge:DiffPatch:2.0.7')

	// Testing
	testImplementation(gradleTestKit())
	testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
		exclude module: 'groovy-all'
	}
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	testImplementation('io.javalin:javalin:5.2.0') {
		exclude group: 'org.jetbrains.kotlin'
	}
	testImplementation 'net.fabricmc:fabric-installer:0.9.0'
	testImplementation 'org.mockito:mockito-core:4.8.0'

	compileOnly 'org.jetbrains:annotations:23.0.0'
	testCompileOnly 'org.jetbrains:annotations:23.0.0'

	testCompileOnly('net.fabricmc:sponge-mixin:0.11.4+mixin.0.8.5') {
		transitive = false
	}
}

jar {
	manifest {
		attributes 'Implementation-Version': project.version
	}

	from configurations.bootstrap.collect { it.isDirectory() ? it : zipTree(it) }
}

java {
	withSourcesJar()
}

spotless {
	java {
		licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
		targetExclude("**/loom/util/DownloadUtil.java", "**/loom/util/FileSystemUtil.java")
	}

	groovy {
		licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
	}

	kotlin {
		licenseHeaderFile(rootProject.file("HEADER")).yearSeparator("-")
		targetExclude("**/build.gradle.kts")
		targetExclude("src/test/resources/projects/*/**")
		ktlint()
	}
}

gradlePlugin {
	plugins {
		fabricLoom {
			id = 'dev.architectury.loom'
			implementationClass = 'net.fabricmc.loom.bootstrap.LoomGradlePluginBootstrap'
		}
	}
}

test {
	maxHeapSize = "2048m"
	useJUnitPlatform()

	// Forward system prop onto tests.
	if (System.getProperty("fabric.loom.test.homeDir")) {
		systemProperty "fabric.loom.test.homeDir", System.getProperty("fabric.loom.test.homeDir")
	}
}

import org.gradle.util.GradleVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node

// Need to tweak this file to pretend we are compatible with j8 so the bootstrap will run.
tasks.withType(GenerateModuleMetadata) {
	doLast {
		def file = outputFile.get().asFile

		def metadata = new groovy.json.JsonSlurper().parseText(file.text)

		metadata.variants.each {
			it.attributes["org.gradle.jvm.version"] = 8
		}

		file.text = groovy.json.JsonOutput.toJson(metadata)
	}
}

// A task to output a json file with a list of all the test to run
task writeActionsTestMatrix() {
	doLast {
		def testMatrix = []
		file('src/test/groovy/net/fabricmc/loom/test/integration').traverse {
			if (it.name.endsWith("Test.groovy")) {
				if (it.name.endsWith("ReproducibleBuildTest.groovy")) {
					// This test gets a special case to run across all os's
					return
				}

				def className = it.path.toString().replace(".groovy", "")
				className = className.substring(className.lastIndexOf("integration/") + "integration/".length()).replace('/', '.')

				// Disabled for CI, as it fails too much.
				if (className.endsWith("DecompileTest")) return

				// Disabled for CI as it hangs.
				if (className.endsWith("FabricAPITest")) return

				testMatrix.add("net.fabricmc.loom.test.integration.${className}")
			}
		}

		// Run all the unit tests together
		testMatrix.add("net.fabricmc.loom.test.unit.*")

		// Kotlin tests
		testMatrix.add("net.fabricmc.loom.test.kotlin.*")

		def json = groovy.json.JsonOutput.toJson(testMatrix)
		def output = file("build/test_matrix.json")
		output.parentFile.mkdir()
		output.text = json
	}
}

tasks.named('wrapper') {
	distributionType = Wrapper.DistributionType.ALL
}

/**
 * Run this task to download the gradle sources next to the api jar, you may need to manually attach the sources jar
 */
task downloadGradleSources() {
	doLast {
		// Awful hack to find the gradle api location
		def gradleApiFile = project.configurations.detachedConfiguration(dependencies.gradleApi()).files.stream()
				.filter {
					it.name.startsWith("gradle-api")
				}.findFirst().orElseThrow()

		def gradleApiSources = new File(gradleApiFile.absolutePath.replace(".jar", "-sources.jar"))
		def url = "https://services.gradle.org/distributions/gradle-${GradleVersion.current().getVersion()}-src.zip"

		gradleApiSources.delete()

		println("Downloading (${url}) to (${gradleApiSources})")
		gradleApiSources << new URL(url).newInputStream()
	}
}

tasks.withType(GenerateModuleMetadata) {
	enabled = false
}
